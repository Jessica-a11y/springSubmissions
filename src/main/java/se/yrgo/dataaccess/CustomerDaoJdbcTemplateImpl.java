package se.yrgo.dataaccess;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao{

    private JdbcTemplate template;

    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";
    private static final String GET_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String GET_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_NAME = ?";
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME = ?, EMAIL = ?, TELEPHONE = ?, NOTES = ?";
    private static final String GET_ALL_SQL = "SELECT * FROM CUSTOMER";

    private static final String INSERT_CALL_SQL = "INSERT INTO TBL_CALL (TIME_AND_DATE, NOTES, CUSTOMER_ID) VALUES (?, ?, ?)";
    private static final String GET_CALL_SQL = "SELECT * FROM TBL_CALL WHERE CUSTOMER_ID=?";

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    public void createTables() {
        try {
            template.update("CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(13), COMPANY_NAME VARCHAR(30), EMAIL VARCHAR(80), TELEPHONE VARCHAR(15), NOTES VARCHAR(100))");
            template.update("CREATE TABLE TBL_CALL (ID integer generated by default as identity (start with 1), TIME_AND_DATE TIMESTAMP, NOTES VARCHAR(100), CUSTOMER_ID VARCHAR(13))");
        } catch(Exception e) {
            System.err.println("Tables CUSTOMER and/or CALL already exists");
        } 
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL, customer.getCustomerId(),
                                    customer.getCompanyName(),
                                    customer.getEmail(),
                                    customer.getTelephone(),
                                    customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return template.queryForObject(GET_SQL, new CustomerMapper(), customerId);
    }

    @Override
    public List<Customer> getByName(String name) {
       return template.query(GET_BY_NAME_SQL, new CustomerMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
       template.update(UPDATE_SQL, customerToUpdate.getCompanyName(), customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query(GET_ALL_SQL, new CustomerMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> calls = template.query(GET_CALL_SQL, new CallMapper(), customerId);
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
       template.update(INSERT_CALL_SQL, newCall.getTimeAndDate(), newCall.getNotes(), customerId);
    }

}

class CustomerMapper implements RowMapper<Customer> {

    @Override
    public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String telephone = rs.getString(4);
        String notes = rs.getString(5);
        Customer customer = new Customer(customerId, companyName, email, telephone, notes);
        return customer;
    }
}

class CallMapper implements RowMapper<Call> {

    @Override
    public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
        Date time = rs.getDate(2);
        String notes = rs.getString(3);
        Call call = new Call(notes, time);
        return call;
    }
}